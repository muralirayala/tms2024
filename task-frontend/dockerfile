# Stage 1: Build Stage
FROM node:16-alpine AS build-stage

# Set the working directory to the folder where your frontend code resides
WORKDIR /usr/src/app/taskapp/task-frontend

# Copy all files from the current local taskapp/task-frontend directory to the container
COPY ./taskapp/task-frontend /usr/src/app/taskapp/task-frontend

# Copy the package.json and package-lock.json
COPY package*.json ./

# Clean npm cache
RUN npm cache clean --force

# Install dependencies
RUN npm ci 

# Debugging: Check if react-scripts is installed
RUN npm list react-scripts

# Debugging: Check if react-scripts is installed and log full paths
RUN echo "Current working directory is: $(pwd)" && \
    echo "Listing node_modules/.bin contents:" && \
    ls -l ./node_modules/.bin && \
    echo "Checking full path for react-scripts:" && \
    realpath ./node_modules/.bin/react-scripts || readlink -f ./node_modules/.bin/react-scripts

# Copy the rest of the React app code
COPY . .

# Debugging: List directory contents to confirm files are in the correct place
RUN echo "Listing all files in /usr/src/app:" && ls -R /usr/src/app

# Build the React app
RUN ./node_modules/.bin/react-scripts build  # Explicit path to react-scripts

# Build the React app
RUN npm run build

# Stage 2: Production Stage
FROM nginx:alpine AS production-stage

# Copy the build output to the Nginx HTML folder
COPY --from=build-stage /usr/src/app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Command to run Nginx
CMD ["nginx", "-g", "daemon off;"]

# Stage 1: Build Stage
FROM node:18-alpine AS build-stage


# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy the package.json and package-lock.json
COPY package*.json ./

# Clean npm cache
RUN npm cache clean --force


RUN npm install react-scripts

# Install dependencies
RUN npm ci 


# Debugging: Check if react-scripts is installed
RUN npm list react-scripts


# Debugging: Check if react-scripts is installed and log full paths
RUN echo "Current working directory is: $(pwd)" && \
    echo "Listing node_modules/.bin contents:" && \
    ls -l ./node_modules/.bin && \
    echo "Checking full path for react-scripts:" && \
    realpath ./node_modules/.bin/react-scripts || readlink -f ./node_modules/.bin/react-scripts

# Copy the local node_modules (not recommended for production)
COPY node_modules ./node_modules

# Copy the rest of the React app code
COPY . .

# Debugging: List the node_modules directory
RUN echo "Listing contents of node_modules:" && ls -R ./node_modules

# Build the React app
RUN ./node_modules/.bin/react-scripts build



# Stage 2: Production Stage
FROM nginx:alpine AS production-stage

# Copy the build output to the Nginx HTML folder
COPY --from=build-stage /usr/src/app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Command to run Nginx
CMD ["nginx", "-g", "daemon off;"]
